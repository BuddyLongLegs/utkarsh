// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    username  String @unique
    userGroup String

    accounts Account[]
    sessions Session[]
    student  Students?
    admin    Admin?
}

model Admin {
    userId      String   @id @default(cuid())
    permissions Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Students {
    userId           String   @id @default(cuid())
    program          String
    duration         Int
    admissionYear    Int
    currentSemester  String
    completedCredits Int
    totalCredits     Int
    cgpa             Float
    email            String?
    phone            String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    resume       StudentResume[]
    applications Application[]

    @@index([userId])
}

model StudentResume {
    id        String   @id @default(cuid())
    userId    String
    name      String
    src       String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    student Students @relation(fields: [userId], references: [userId], onDelete: Cascade)

    @@index([userId])
}

model Config {
    key       String   @id
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ParticipatingGroups {
    id              String @id @default(cuid())
    year            Int
    placementTypeId String
    admissionYear   Int
    program         String

    placementType PlacementType @relation(fields: [placementTypeId], references: [id])

    @@unique([year, placementTypeId, admissionYear, program])
    @@index([placementTypeId])
}

model PlacementType {
    id                  String                @id @default(cuid())
    name                String
    description         String?               @db.Text
    ParticipatingGroups ParticipatingGroups[]
    JobOpening          JobOpening[]
}

model Company {
    id          String   @id @default(cuid())
    name        String
    logo        String
    website     String
    description String?  @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    jobOpenings JobOpening[]
    events      Event[]
}

model JobOpening {
    // descriptive data
    id               String  @id @default(cuid())
    companyId        String
    title            String
    description      String?
    location         String
    paySplit         Json
    payTotal         Int
    promisedPaySplit Json?
    promisedPayTotal Int?
    empBenefits      String?

    jobType String

    registrationStart      DateTime
    registrationEnd        DateTime
    extraApplicationFields Json?

    hidden      Boolean @default(false)
    autoApprove Boolean @default(false)
    autoVisible Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    company                     Company                       @relation(fields: [companyId], references: [id], onDelete: Cascade)
    placementType               PlacementType                 @relation(fields: [jobType], references: [id])
    applications                Application[]
    events                      Event[]
    JobOpeningParticipantGroups JobOpeningParticipantGroups[]

    @@index([companyId])
    @@index([jobType])
}

model JobOpeningParticipantGroups {
    id            String @id @default(cuid())
    jobOpeningId  String
    admissionYear Int
    program       String
    minCgpa       Float  @default(0)
    minCredits    Int    @default(0)

    jobOpening JobOpening @relation(fields: [jobOpeningId], references: [id], onDelete: Cascade)

    @@index([jobOpeningId])
}

model Application {
    id             String   @id @default(cuid())
    userId         String
    jobId          String
    additionalInfo Json?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    latestStatusId String?

    statuses     ApplicationStatus[] @relation("ApplicationStatuses")
    latestStatus ApplicationStatus?  @relation("LatestStatus", fields: [latestStatusId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    student           Students            @relation(fields: [userId], references: [userId], onDelete: Cascade)
    jobOpening        JobOpening          @relation(fields: [jobId], references: [id], onDelete: Cascade)
    applicationStatus ApplicationStatus[]

    @@index([userId])
    @@index([jobId])
    @@index([latestStatusId])
}

enum ApplicationStatusEnum {
    REGISTERED
    APPROVED
    SHORTLISTED
    REJECTED
    SELECTED
}

model ApplicationStatus {
    id            String   @id @default(cuid())
    applicationId String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    status ApplicationStatusEnum @default(REGISTERED)

    application Application @relation("ApplicationStatuses", fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "application_status_applicationId_fkey")

    applications Application[] @relation("LatestStatus")
    Application  Application   @relation(fields: [applicationId], references: [id])

    @@index([applicationId, createdAt], name: "latest_status_index")
    @@map(name: "application_status_applicationId_fkey")
}

enum EventType {
    PLACEMENT_DRIVE
    WORKSHOP
    SEMINAR
    TALK
    WEBINAR
    HACKATHON
    COMPETITION
    ASSESSMENT
    OTHER
}

model Event {
    id          String    @id @default(cuid())
    title       String
    description String?   @db.Text
    location    String
    type        EventType
    link        String?

    startTime DateTime
    endTime   DateTime

    companyId    String?
    jobOpeningId String?

    company    Company?    @relation(fields: [companyId], references: [id], onDelete: SetNull)
    jobOpening JobOpening? @relation(fields: [jobOpeningId], references: [id], onDelete: SetNull)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([companyId])
    @@index([jobOpeningId])
}
