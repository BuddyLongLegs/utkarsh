// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    username  String @unique
    userGroup String

    accounts Account[]
    sessions Session[]
    student  Students?
    admin    Admin?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Students {
    userId           String   @id @default(cuid())
    program          String
    duration         Int
    admissionYear    Int
    currentSemester  String
    completedCredits Int
    totalCredits     Int
    cgpa             Float
    email            String?
    phone            String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    resume StudentResume[]

    @@index([userId])
}

model StudentResume {
    id        String   @id @default(cuid())
    userId    String
    name      String
    src       String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    student Students @relation(fields: [userId], references: [userId], onDelete: Cascade)

    @@index([userId])
}

model ParticipatingGroups {
    year            Int
    placementTypeId String
    admissionYear   Int
    program         String

    placementType PlacementType @relation(fields: [placementTypeId], references: [id])

    @@id([year, placementTypeId, admissionYear, program])
    @@index([placementTypeId])
}

model Admin {
    userId      String   @id @default(cuid())
    permissions Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model PlacementType {
    id                  String                @id
    name                String
    description         String
    ParticipatingGroups ParticipatingGroups[]
}

model Config {
    key       String   @id
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
